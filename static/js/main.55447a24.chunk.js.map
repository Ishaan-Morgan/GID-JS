{"version":3,"sources":["components/buttonsInHeader/index.jsx","components/grid/index.jsx","components/leaderBoard/index.jsx","components/message/index.jsx","App/index.js","store/Store.js","index.js"],"names":["Option","Select","moment","require","Headers","state","firstGames","arr","intervalGame","createGrid","size","temp","i","j","classColor","id","randomSort","tempArr","props","Store","grid","concat","length","Math","floor","random","handleChange","value","clearInterval","setChoosenModeGame","modeGames","setIsPlay","setPlayerWinner","setCount","setGameScore","computer","player","countForWin","setGrid","field","handleChangeName","name","setPlayerName","target","gameEnd","winner","sendWinningPlayer","date","format","checkerCell","counts","count","grids","score","JSON","parse","stringify","gameScore","split","playerName","iPrew","jPrew","handlePlayGame","isPlay","Object","entries","choosenModeGame","message","error","GameScore","setInterval","delay","setState","this","gameSettings","className","style","width","onChange","defaultValue","map","item","key","placeholder","type","onClick","React","Component","Header","inject","observer","keys","event","attributes","class","nodeValue","toString","reverse","row","index","justufy","cell","gridStyle","textAlign","LeaderBord","useEffect","getWinners","title","leaderBoards","Grid","slice","Title","Typography","Message","marginTop","playerWinner","App","url","fetch","method","then","res","json","data","headers","body","catch","console","decorate","observable","action","setModeGames","store","getGameSetings","stores","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55447a24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { Select, Button, Input, message } from \"antd\";\r\nimport \"./btnInHeader.css\";\r\nconst { Option } = Select;\r\nlet moment = require(\"moment\");\r\n\r\nclass Headers extends React.Component {\r\n  state = { firstGames: false, arr: [] };\r\n  intervalGame = null;\r\n\r\n  createGrid = size => {\r\n    let temp = [];\r\n    for (let i = 0; i < +size; i++) {\r\n      temp[i] = [];\r\n      for (let j = 0; j < +size; j++) {\r\n        temp[i][j] = {\r\n          classColor: \"\",\r\n          id: `${i}/${j}`\r\n        };\r\n      }\r\n    }\r\n    return temp;\r\n  };\r\n  randomSort = () => {\r\n    let tempArr = [...this.props.Store.grid];\r\n    let arr = [].concat(...tempArr);\r\n    let j;\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      [arr[j], arr[i]] = [arr[i], arr[j]];\r\n    }\r\n    return arr;\r\n  };\r\n  handleChange = value => {\r\n    clearInterval(this.intervalGame);\r\n    this.props.Store.setChoosenModeGame(this.props.Store.modeGames[value]);\r\n    this.props.Store.setIsPlay(false);\r\n    this.props.Store.setPlayerWinner(\"\");\r\n    this.props.Store.setCount(0);\r\n    this.props.Store.setGameScore({ computer: 0, player: 0, countForWin: 0 });\r\n    this.props.Store.setGrid(\r\n      this.createGrid(this.props.Store.modeGames[value].field)\r\n    );\r\n  };\r\n  handleChangeName = name => {\r\n    this.props.Store.setPlayerName(name.target.value);\r\n  };\r\n  gameEnd = winner => {\r\n    // добавить отправку результатов на сервер\r\n    clearInterval(this.intervalGame);\r\n    this.props.Store.setIsPlay(false);\r\n    this.props.Store.setGameScore({ player: 0, computer: 0, countForWin: 0 });\r\n    this.props.Store.setCount(0);\r\n    this.props.Store.setPlayerWinner(winner);\r\n    this.props.Store.sendWinningPlayer({\r\n      winner,\r\n      date: moment().format(\"H:mm; DD MMMM YYYY\")\r\n    });\r\n  };\r\n  checkerCell = () => {\r\n    let counts = this.props.Store.count; //номер ячейки для проверки\r\n    let grids = [...this.props.Store.grid];\r\n    let arr = [...this.state.arr];\r\n    let score = JSON.parse(JSON.stringify(this.props.Store.gameScore));\r\n    if (counts === 0) {\r\n      //если первый элемент, то просто красим в синий цвет\r\n      let [i, j] = arr[counts].id.split(\"/\");\r\n      grids[i][j].classColor = \"blue-cell\";\r\n      counts = counts + 1;\r\n    } else if (counts === arr.length) {\r\n      //если последний элемент, то только проверяем прыдыдущий\r\n      let [i, j] = arr[counts - 1].id.split(\"/\");\r\n      if (grids[i][j].classColor === \"blue-cell\") {\r\n        // если предыдущая была синая, добавляем очко комппьютеру\r\n        grids[i][j].classColor = \"red-cell\";\r\n        score.computer = score.computer + 1;\r\n      } else {\r\n        //иначе мы добавяем очко игроку\r\n        score.player = score.player + 1;\r\n      }\r\n      if (score.player === score.countForWin) {\r\n        //game win player\r\n        this.gameEnd(this.props.Store.playerName);\r\n        return null;\r\n      } else if (score.computer === score.countForWin) {\r\n        this.gameEnd(\"Computer\");\r\n        return null;\r\n      }\r\n    } else {\r\n      // если не перый и не послдений, то проверяем предыдущий и красим в синий текущий\r\n      let [iPrew, jPrew] = arr[counts - 1].id.split(\"/\");\r\n      let [i, j] = arr[counts].id.split(\"/\");\r\n      if (grids[iPrew][jPrew].classColor === \"blue-cell\") {\r\n        // если предыдущая была синая, добавляем очко комппьютеру\r\n        grids[iPrew][jPrew].classColor = \"red-cell\";\r\n        score.computer = score.computer + 1;\r\n      } else {\r\n        //иначе мы добавяем очко игроку\r\n        score.player = score.player + 1;\r\n      }\r\n      if (score.player === score.countForWin) {\r\n        this.gameEnd(this.props.Store.playerName);\r\n        return null;\r\n      } else if (score.computer === score.countForWin) {\r\n        this.gameEnd(\"Computer\");\r\n        return null;\r\n      } else {\r\n        grids[i][j].classColor = \"blue-cell\";\r\n        counts = counts + 1;\r\n      }\r\n    }\r\n    this.props.Store.setCount(counts);\r\n    this.props.Store.setGrid(grids);\r\n    this.props.Store.setGameScore(score);\r\n  };\r\n  handlePlayGame = () => {\r\n    if (\r\n      !this.props.Store.isPlay &&\r\n      Object.entries(this.props.Store.choosenModeGame).length\r\n    ) {\r\n      if (this.props.Store.playerName === \"\") {\r\n        message.error(\"enter your name!\");\r\n      } else {\r\n        clearInterval(this.intervalGame);\r\n        this.props.Store.setPlayerWinner(\"\");\r\n        let GameScore = this.props.Store.gameScore;\r\n        let field = this.props.Store.choosenModeGame.field;\r\n        this.props.Store.setGrid(this.createGrid(field));\r\n        GameScore.countForWin = Math.floor((field * field) / 2) + 1;\r\n        this.props.Store.setGameScore(GameScore);\r\n        this.props.Store.setIsPlay(true);\r\n        this.intervalGame = setInterval(\r\n          this.checkerCell,\r\n          this.props.Store.choosenModeGame.delay\r\n        );\r\n        this.setState({\r\n          firstGames: true,\r\n          arr: this.randomSort()\r\n        });\r\n      }\r\n    } else {\r\n      message.error(\"pick game mode or game is plaing\");\r\n    }\r\n  };\r\n  render() {\r\n    const { gameSettings, isPlay } = this.props.Store;\r\n    const { firstGames } = this.state;\r\n    const { handleChange, handleChangeName, handlePlayGame } = this;\r\n    return (\r\n      <div className=\"header-container\">\r\n        {gameSettings.length ? (\r\n          <div className=\"pick-game-mod-select\">\r\n            <Select\r\n              style={{ width: 200 }}\r\n              onChange={handleChange}\r\n              defaultValue=\"Pick game mode\"\r\n            >\r\n              {gameSettings.map(item => {\r\n                return (\r\n                  <Option key={item[0]} value={item[0]}>\r\n                    {item[0]}\r\n                  </Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          </div>\r\n        ) : (\r\n          <div> load... </div>\r\n        )}\r\n\r\n        <div className=\"enter-name-input\">\r\n          <Input placeholder=\"Enter your name\" onChange={handleChangeName} />\r\n        </div>\r\n        <div className=\"play-button\">\r\n          <Button type=\"primary\" onClick={handlePlayGame}>\r\n            {firstGames && !isPlay ? \"PLAY AGAIN\" : \"PLAY\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst Header = inject(\"Store\")(observer(Headers));\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { Col, Row } from \"antd\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = props => {\r\n  const handleClickToCell = event => {\r\n    let arr = event.target.attributes.class.nodeValue\r\n      .toString()\r\n      .split(\" \")\r\n      .reverse()[0]\r\n      .split(\"/\");\r\n    if (arr.length == 2) {\r\n      let [i, j] = arr\r\n\r\n      if (props.Store.isPlay) {\r\n        let arr = props.Store.grid;\r\n        if (arr[+i][+j].classColor === \"blue-cell\") {\r\n          arr[+i][+j].classColor = \"green-cell\";\r\n          props.Store.setGrid(arr);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"grid-container\">\r\n      {Object.keys(props.Store.grid).length ? (\r\n        <div className=\"grid-div\" onClick={handleClickToCell}>\r\n          {props.Store.grid.map((row, index) => {\r\n            return (\r\n              <Row type=\"flex\" justufy=\"center\" key={index}>\r\n                {row.map((cell, j) => {\r\n                  return (\r\n                    <Col\r\n                      key={j}\r\n                      className={`cell-in-row ${cell.classColor} ${index + '/' + j}`}\r\n                    />\r\n                  );\r\n                })}\r\n              </Row>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div>Please pick game mode</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst grid = inject(\"Store\")(observer(Grid));\r\nexport default grid;\r\n// onClick={() => handleClickToCell(index, j)}\r\n","import React, { useEffect } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Card } from 'antd';\r\nimport './LeaderBoard.css'\r\nconst gridStyle = {\r\n    width: '100%',\r\n    textAlign: 'center',\r\n};\r\nconst LeaderBord = inject('Store')(observer((props) => {\r\n    useEffect(() => {\r\n        props.Store.getWinners();\r\n    }, [])\r\n    return (\r\n        <div className='leader-board-container'>\r\n            <Card title=\"Leader board\" >\r\n                {props.Store.leaderBoards.length === 0 ?\r\n                    <Card.Grid style={gridStyle}> NO DATA </Card.Grid>\r\n                    :\r\n                    props.Store.leaderBoards.slice().reverse().map((item, index) => <Card.Grid key={index} style={gridStyle}>{`${item.winner} - ${item.date}`}</Card.Grid>)\r\n                }\r\n            </Card>\r\n        </div>\r\n    );\r\n}))\r\nexport default LeaderBord;","import React from 'react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Typography } from 'antd';\r\nconst { Title } = Typography;\r\n\r\nconst Message = inject('Store')(observer((props) => {\r\n    return (\r\n        <div style={{textAlign: 'center', marginTop: '1rem'}}>\r\n            {props.Store.playerWinner === '' ? '' : <Title>{`${props.Store.playerWinner} won`}</Title>}\r\n        </div>\r\n    );\r\n}))\r\nexport default Message;","import React from 'react'\r\n\r\nimport Header from '../components/buttonsInHeader';\r\nimport Grid from '../components/grid';\r\nimport './App.css';\r\nimport LeaderBoard from '../components/leaderBoard';\r\nimport { Typography } from 'antd';\r\nimport Message from '../components/message';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className='main-container'>\r\n            <div className='mainTitle'><Title>Game In Dots</Title></div>\r\n            <div className='container-content'>\r\n                <div>\r\n                    <Header />\r\n                    <Message />\r\n                    <Grid />\r\n                </div>\r\n                <LeaderBoard />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default App","import { observable, action, decorate } from \"mobx\";\r\n\r\nclass Store {\r\n  modeGames = {};\r\n  choosenModeGame = {};\r\n  isPlay = false;\r\n  playerName = \"\";\r\n  url = \"https://starnavi-frontend-test-task.herokuapp.com/\";\r\n  gameSettings = [];\r\n  grid = [];\r\n  count = 0;\r\n  gameScore = {\r\n    player: 0,\r\n    computer: 0,\r\n    countForWin: 0\r\n  };\r\n  playerWinner = \"\";\r\n  setPlayerWinner(props) {\r\n    this.playerWinner = props;\r\n  }\r\n  leaderBoards = [];\r\n  setGameScore(props) {\r\n    this.gameScore = props;\r\n  }\r\n  setCount(props) {\r\n    this.count = props;\r\n  }\r\n  setModeGames(props) {\r\n    this.modeGames = props;\r\n  }\r\n  setIsPlay(props) {\r\n    this.isPlay = props;\r\n  }\r\n  setPlayerName(props) {\r\n    this.playerName = props;\r\n  }\r\n  setChoosenModeGame(props) {\r\n    this.choosenModeGame = props;\r\n  }\r\n  setGrid(props) {\r\n    this.grid = [...props];\r\n  }\r\n  async getGameSetings() {\r\n    return fetch(`${this.url}game-settings`, {\r\n      method: \"GET\"\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.gameSettings = Object.entries(res);\r\n        this.modeGames = res;\r\n      });\r\n  }\r\n  async getWinners() {\r\n    return fetch(`${this.url}winners`, {\r\n      method: \"GET\"\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => (this.leaderBoards = [...res]));\r\n  }\r\n  async sendWinningPlayer(data) {\r\n    fetch(`${this.url}winners`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(res => {res.json(); this.getWinners()})\r\n      .catch(error => console.error(\"Ошибка:\", error));\r\n  }\r\n}\r\ndecorate(Store, {\r\n  leaderBoards: observable,\r\n  modeGames: observable,\r\n  isPlay: observable,\r\n  playerName: observable,\r\n  gameSettings: observable,\r\n  choosenModeGame: observable,\r\n  grid: observable,\r\n  count: observable,\r\n  gameScore: observable,\r\n  playerWinner: observable,\r\n\r\n  setPlayerWinner: action,\r\n  setGameScore: action,\r\n  setCount: action,\r\n  setIsPlay: action,\r\n  setModeGames: action,\r\n  setPlayerName: action,\r\n  setChoosenModeGame: action,\r\n  setGrid: action\r\n});\r\n\r\nconst store = new Store();\r\nstore.getGameSetings();\r\nexport default store;\r\nexport { Store };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"mobx-react\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport App from \"./App\";\r\nimport Store from \"./store/Store\"\r\nconst stores = { Store };\r\nReactDOM.render(\r\n  <Provider {...stores}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}